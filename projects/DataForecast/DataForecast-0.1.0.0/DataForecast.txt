-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Type-safe data analysis.
--   
--   Please see README.md
@package DataForecast
@version 0.1.0.0


module DataForecast.TimeSeries

-- | Time series date representation with the resolution breakdown encoded
--   in the type.
--   
--   <tt>parts</tt> has kind '[TsPeriod]' which represents the hierarchical
--   breakdown of your data. You are responsible for providing the correct
--   type hierarchy for your data initially, but once you have done that
--   the library ensures that all analysis performed is valid.
--   
--   In general you should not use the <a>TimeSeries</a> constructor
--   directly, instead use the <a>raw</a> and <a>fromParts</a> construction
--   functions defined below.
data TimeSeries (parts :: [TsPeriod])
[TimeSeries] :: SPeriod p -> SummaryData -> Subparts subparts -> TimeSeries (p : subparts)

-- | Get the <a>SummaryData</a> out of a TimeSeries.
getSD :: TimeSeries parts -> SummaryData

-- | Set the <a>SummaryData</a> field of a <a>TimeSeries</a>. We can't use
--   record syntax because
--   <a>https://ghc.haskell.org/trac/ghc/ticket/2595</a> is not
--   implemented.
setSD :: SummaryData -> TimeSeries parts -> TimeSeries parts

-- | Get the <a>Subparts</a> out of a <a>TimeSeries</a>.
getSub :: TimeSeries (p : subparts) -> Subparts subparts

-- | Set the <a>Subparts</a> of the <a>TimeSeries</a>.
setSub :: Subparts subparts -> TimeSeries (p : subparts) -> TimeSeries (p : subparts)

-- | Typeclass for constructing <a>TimeSeries</a> with default data.
--   
--   This is used by several of the <a>TimeSeries</a> construction
--   functions such as <a>raw</a>. It provides a convenient way for
--   constructing time series of different types with the same functions
--   and allowing the concrete type to be pinned down by a type signature.
class BuildTS p
build :: BuildTS p => SummaryData -> Subparts rest -> TimeSeries (p : rest)

-- | Construct a leaf <a>TimeSeries</a> with the given <tt>total</tt>.
--   
--   <b>Example</b>:
--   
--   <pre>
--   raw 42 :: TimeSeries '[ 'Year ]
--   </pre>
raw :: BuildTS p => Double -> TimeSeries '[p]

-- | Construct a <a>TimeSeries</a> given the constituent <a>TimeSeries</a>
--   parts.
--   
--   <b>Example</b>:
--   
--   <pre>
--   yearByQuarter :: TimeSeries '[ 'Year, 'Quarter ]
--   yearByQuarter = fromParts [ raw 10, raw 20, raw 30, raw 15 ]
--   </pre>
fromParts :: BuildTS part => [TimeSeries subparts] -> TimeSeries (part : subparts)

-- | Use promoted constructors to represent the different timeseries that
--   we have. When using these as kinds you must prefix them with a single
--   quote (').
--   
--   <b>Example</b>:
--   
--   <pre>
--   raw 4 :: TimeSeries '[ 'Day ]
--   </pre>
data TsPeriod
Decade :: TsPeriod
Year :: TsPeriod
Quarter :: TsPeriod
Month :: TsPeriod
Day :: TsPeriod

-- | The singleton for the promoted <a>TsPeriod</a> type.
--   
--   See
--   <a>https://www.schoolofhaskell.com/user/konn/prove-your-haskell-for-great-safety/dependent-types-in-haskell#singleton-patterns</a>
--   for details.
data SPeriod (x :: TsPeriod)
[SDecade] :: SPeriod Decade
[SYear] :: SPeriod Year
[SQuarter] :: SPeriod Quarter
[SMonth] :: SPeriod Month
[SDay] :: SPeriod Day

-- | The summarization of the entire time series rooted at the current
--   'TimeSeries.
data SummaryData
SummaryData :: Maybe Double -> Maybe Double -> SummaryData
[sdtotal] :: SummaryData -> Maybe Double
[sdmean] :: SummaryData -> Maybe Double

-- | The default <a>SummaryData</a> with <a>Nothing</a> for the
--   <a>sdtotal</a> and <a>sdmean</a>.
defaultSummary :: SummaryData

-- | Construct a <a>SummaryData</a> with the <a>sdtotal</a> set.
summaryWithTotal :: Double -> SummaryData

-- | Set the total for the <a>SummaryData</a>.
setSdTotal :: Double -> SummaryData -> SummaryData

-- | Set the mean for the <a>SummaryData</a>.
setSdMean :: Double -> SummaryData -> SummaryData

-- | The constituent components of a <a>TimeSeries</a>. If the
--   <a>TimeSeries</a> is just a leaf with raw data then <a>subs</a> will
--   be <a>Nothing</a>.
data Subparts (parts :: [TsPeriod])
Subparts :: Maybe [TimeSeries parts] -> Subparts
[subs] :: Subparts -> Maybe [TimeSeries parts]
instance GHC.Show.Show DataForecast.TimeSeries.TsPeriod
instance GHC.Classes.Eq DataForecast.TimeSeries.TsPeriod
instance GHC.Classes.Eq (DataForecast.TimeSeries.TimeSeries parts)
instance GHC.Show.Show (DataForecast.TimeSeries.TimeSeries parts)
instance GHC.Classes.Eq (DataForecast.TimeSeries.SPeriod x)
instance GHC.Show.Show (DataForecast.TimeSeries.SPeriod x)
instance GHC.Classes.Eq DataForecast.TimeSeries.SummaryData
instance GHC.Show.Show DataForecast.TimeSeries.SummaryData
instance GHC.Classes.Eq (DataForecast.TimeSeries.Subparts parts)
instance GHC.Show.Show (DataForecast.TimeSeries.Subparts parts)
instance DataForecast.TimeSeries.BuildTS 'DataForecast.TimeSeries.Year
instance DataForecast.TimeSeries.BuildTS 'DataForecast.TimeSeries.Quarter
instance DataForecast.TimeSeries.BuildTS 'DataForecast.TimeSeries.Month
instance DataForecast.TimeSeries.BuildTS 'DataForecast.TimeSeries.Day
instance Data.Default.Class.Default DataForecast.TimeSeries.SummaryData
instance Data.Default.Class.Default (DataForecast.TimeSeries.Subparts '[])


module DataForecast.TimeSeries.Aggregate

-- | Compute the total for each <a>SummaryData</a> in the
--   <a>TimeSeries</a>.
--   
--   This propogates totals bottom up from the raw leaf data to the root
--   and updating all <a>SummaryData</a> nodes along the way.
computeTotal :: TimeSeries parts -> TimeSeries parts


-- | Top level module for DataForcest. Simply re-exports functionality from
--   sub-modules.
module DataForecast


module DataForecast.Tutorial
yearByQuarterConstructor :: TimeSeries '[Year, Quarter]
yearByQuarterRaw :: TimeSeries '[Year, Quarter]
yearByQuarter :: TimeSeries '[Year, Quarter]
yearByQuarterByMonth :: TimeSeries '[Year, Quarter, Month]
yearByQuarterTotal :: TimeSeries '[Year, Quarter]
analyze :: TimeSeries parts -> TimeSeries parts -> Bool
analyzeYearByQuarter :: Bool
quarterByMonth :: TimeSeries '[Quarter, Month]
hasHigherProfitsThan :: TimeSeries (a : restl) -> TimeSeries (a : restr) -> Bool
yearA :: TimeSeries '[Year]
yearB :: TimeSeries '[Year, Quarter]
aHigherThanB :: Bool
yearC :: TimeSeries '[Year]
quarterA :: TimeSeries '[Quarter]
analyzeSeries :: TimeSeries (l : (a : restl)) -> TimeSeries (r : (a : restr)) -> Bool
